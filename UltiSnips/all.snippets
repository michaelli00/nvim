snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet


snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet


snippet dm "Math" wA
\[
$1
.\] $0
endsnippet


snippet '([A-Za-z])_(\d\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet '([A-Za-z])_(\d\d)' "auto superscript" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet


snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet


priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
